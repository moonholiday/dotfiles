#!/usr/bin/perl
#
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 85%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.

# Edited by Andreas Lindlbauer <endeavouros.mousily@aleeas.com>

use strict;
use warnings;
use utf8;

# otherwise we get in console "Wide character in print at"
binmode(STDOUT, ':utf8');

my $upower;
my $percent;
my $bat_state;
my $status;
my $ac_adapt;
my $full_text;
my $short_text;
my $label = '😅';
my $bat_number = $ENV{BLOCK_INSTANCE} || 0;
my $battery_path;

# Finding the correct battery path
open (UPOWER_DEVICES, "upower -e 2>&1 | grep 'battery' |") or die "Failed to execute upower: $!";
my @battery_devices = <UPOWER_DEVICES>;
close(UPOWER_DEVICES);

if (@battery_devices) {
    $battery_path = $battery_devices[$bat_number];
    chomp($battery_path);
} else {
    die "No battery devices found\n";
}

# Extracting the battery percentage
open (UPOWER, "upower -i $battery_path 2>&1 | grep 'percentage:' |") or die "Failed to execute upower: $!";
$upower = <UPOWER>;
close(UPOWER);

# fail on unexpected output
if ($upower !~ /percentage:\s+(\d+)%/) {
    die "Unexpected output from upower for percentage: $upower\n";
}

$percent = $1;
$full_text = "$percent%";

# Extracting the battery state
open (BAT_STATE, "upower -i $battery_path 2>&1 |") or die "Failed to execute upower: $!";
my @upower_output = <BAT_STATE>;
close(BAT_STATE);

# Debug: print full upower output
foreach my $line (@upower_output) {
    print STDERR "DEBUG: $line";
}

# Search for the state line
foreach my $line (@upower_output) {
    if ($line =~ /state:\s+(\w+)/) {
        $status = $1;
        last;
    }
}

if (!defined $status) {
    die "Failed to find battery state in upower output\n";
}

if ($status eq 'discharging') {
    $full_text .= ' ';
} elsif ($status eq 'charging') {
    $full_text .= ' ';
} elsif ($status eq 'unknown') {
    open (AC_ADAPTER, "acpi -a 2>&1 |") or die "Failed to execute acpi: $!";
    $ac_adapt = <AC_ADAPTER>;
    close(AC_ADAPTER);

    if ($ac_adapt =~ /: ([\w-]+)/) {
        $ac_adapt = $1;

        if ($ac_adapt eq 'on-line') {
            $full_text .= ' CHR';
        } elsif ($ac_adapt eq 'off-line') {
            $full_text .= ' DIS';
        }
    }
}

$short_text = $full_text;

if ($percent < 20) {
    $label = '';
} elsif ($percent < 45) {
    $label = '';
} elsif ($percent < 70) {
    $label = '';
} elsif ($percent < 95) {
    $label = '';
} else {
    $label = '';
}

# print text
print " ${label} ";
print " $full_text\n";
print " ${label}";
print " $short_text\n";

# consider color and urgent flag only on discharge
if ($status eq 'discharging') {

    if ($percent < 20) {
        print "#FF0000\n";
    } elsif ($percent < 40) {
        print "#FFAE00\n";
    } elsif ($percent < 60) {
        print "#FFF600\n";
    } elsif ($percent < 85) {
        print "#A8FF00\n";
    }

    if ($percent < 5) {
        exit(33);
    }
}

exit(0);

